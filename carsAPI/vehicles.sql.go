// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: vehicles.sql

package carsAPI

import (
	"context"
)

const countVehicles = `-- name: CountVehicles :one
SELECT count(*) FROM vehicles
`

func (q *Queries) CountVehicles(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countVehicles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createVehicle = `-- name: CreateVehicle :one
INSERT INTO vehicles (name, description, price, color) VALUES ($1,$2,$3,$4)
RETURNING id, name, description, price, color, created_at, updated_at
`

type CreateVehicleParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Price       string `json:"price"`
	Color       string `json:"color"`
}

func (q *Queries) CreateVehicle(ctx context.Context, arg CreateVehicleParams) (Vehicle, error) {
	row := q.db.QueryRowContext(ctx, createVehicle,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Color,
	)
	var i Vehicle
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVehicle = `-- name: DeleteVehicle :exec
DELETE FROM vehicles WHERE id = $1
`

func (q *Queries) DeleteVehicle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteVehicle, id)
	return err
}

const getVehicle = `-- name: GetVehicle :one
SELECT id, name, description, price, color, created_at, updated_at FROM vehicles
WHERE id = $1
`

func (q *Queries) GetVehicle(ctx context.Context, id int64) (Vehicle, error) {
	row := q.db.QueryRowContext(ctx, getVehicle, id)
	var i Vehicle
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listVehicles = `-- name: ListVehicles :many
SELECT id, name, description, price, color, created_at, updated_at FROM vehicles
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListVehiclesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListVehicles(ctx context.Context, arg ListVehiclesParams) ([]Vehicle, error) {
	rows, err := q.db.QueryContext(ctx, listVehicles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vehicle
	for rows.Next() {
		var i Vehicle
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVehicle = `-- name: UpdateVehicle :exec
UPDATE vehicles 
SET 
  name = $1,
  description = $2,
  price = $3,
  color = $4
WHERE id = $5
`

type UpdateVehicleParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Price       string `json:"price"`
	Color       string `json:"color"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateVehicle(ctx context.Context, arg UpdateVehicleParams) error {
	_, err := q.db.ExecContext(ctx, updateVehicle,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Color,
		arg.ID,
	)
	return err
}
