// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: invoice.sql

package db

import (
	"context"
	"database/sql"
)

const countInvoices = `-- name: CountInvoices :one
SELECT count(*) FROM invoices
`

func (q *Queries) CountInvoices(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countInvoices)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (buyer_id) VALUES ($1)
RETURNING id, buyer_id, created_at
`

func (q *Queries) CreateInvoice(ctx context.Context, buyerID sql.NullInt64) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, createInvoice, buyerID)
	var i Invoice
	err := row.Scan(&i.ID, &i.BuyerID, &i.CreatedAt)
	return i, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM invoices WHERE id = $1
`

func (q *Queries) DeleteInvoice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInvoice, id)
	return err
}

const getInvoice = `-- name: GetInvoice :one
SELECT id, buyer_id, created_at FROM invoices
WHERE id = $1
`

func (q *Queries) GetInvoice(ctx context.Context, id int64) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoice, id)
	var i Invoice
	err := row.Scan(&i.ID, &i.BuyerID, &i.CreatedAt)
	return i, err
}

const listInvoices = `-- name: ListInvoices :many
SELECT id, buyer_id, created_at FROM invoices
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListInvoicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInvoices(ctx context.Context, arg ListInvoicesParams) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, listInvoices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(&i.ID, &i.BuyerID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoice = `-- name: UpdateInvoice :exec
UPDATE invoices 
SET 
  buyer_id = $1
WHERE id = $2
`

type UpdateInvoiceParams struct {
	BuyerID sql.NullInt64 `json:"buyer_id"`
	ID      int64         `json:"id"`
}

func (q *Queries) UpdateInvoice(ctx context.Context, arg UpdateInvoiceParams) error {
	_, err := q.db.ExecContext(ctx, updateInvoice, arg.BuyerID, arg.ID)
	return err
}
