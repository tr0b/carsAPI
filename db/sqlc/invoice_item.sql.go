// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: invoice_item.sql

package carsAPI

import (
	"context"
)

const countInvoiceItems = `-- name: CountInvoiceItems :one
SELECT count(*) FROM invoice_items
`

func (q *Queries) CountInvoiceItems(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countInvoiceItems)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createInvoiceItem = `-- name: CreateInvoiceItem :one
INSERT INTO invoice_items (invoice_id, vehicle_id) VALUES ($1,$2)
RETURNING id, invoice_id, vehicle_id, created_at
`

type CreateInvoiceItemParams struct {
	InvoiceID int64 `json:"invoice_id"`
	VehicleID int64 `json:"vehicle_id"`
}

func (q *Queries) CreateInvoiceItem(ctx context.Context, arg CreateInvoiceItemParams) (InvoiceItem, error) {
	row := q.db.QueryRowContext(ctx, createInvoiceItem, arg.InvoiceID, arg.VehicleID)
	var i InvoiceItem
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.VehicleID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteInvoiceItem = `-- name: DeleteInvoiceItem :exec
DELETE FROM invoice_items WHERE id = $1
`

func (q *Queries) DeleteInvoiceItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInvoiceItem, id)
	return err
}

const getInvoiceItem = `-- name: GetInvoiceItem :one
SELECT id, invoice_id, vehicle_id, created_at FROM invoice_items
WHERE id = $1
`

func (q *Queries) GetInvoiceItem(ctx context.Context, id int64) (InvoiceItem, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceItem, id)
	var i InvoiceItem
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.VehicleID,
		&i.CreatedAt,
	)
	return i, err
}

const listInvoiceItems = `-- name: ListInvoiceItems :many
SELECT id, invoice_id, vehicle_id, created_at FROM invoice_items
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListInvoiceItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInvoiceItems(ctx context.Context, arg ListInvoiceItemsParams) ([]InvoiceItem, error) {
	rows, err := q.db.QueryContext(ctx, listInvoiceItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InvoiceItem
	for rows.Next() {
		var i InvoiceItem
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.VehicleID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoiceItem = `-- name: UpdateInvoiceItem :exec
UPDATE invoice_items 
SET 
  invoice_id = $1,
  vehicle_id = $2
WHERE id = $3
`

type UpdateInvoiceItemParams struct {
	InvoiceID int64 `json:"invoice_id"`
	VehicleID int64 `json:"vehicle_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) UpdateInvoiceItem(ctx context.Context, arg UpdateInvoiceItemParams) error {
	_, err := q.db.ExecContext(ctx, updateInvoiceItem, arg.InvoiceID, arg.VehicleID, arg.ID)
	return err
}
